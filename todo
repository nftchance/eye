✔ Figure out how to get blinks of an eye @done(22-11-23 21:47)
  Notes: this is done but I don't think its setup exactly how I would want
☐ Figure out how to subscribe to changes of blinks on an eye
  ☐ make sure they are updating the front end
☐ Figure out how to add a blink to an eye through the front end
  Notes: I think if we are just subscribing to model changes of organizations we would have to be connected to the blinks endpoint. It would me far more ideal though if we could just append the addition of listening to models that are assigned to the models we've already subscribed to. I think this is possible, but I'm not sure how to do it.

Archive:
  ✔ Add the ability to edit a eye @done(22-11-23 17:57)
  ✔ Add the ability to create a new eye @done(22-11-23 15:37)
  ✔ Figure out how to redirect to the newly created eye @done(22-11-23 16:58)
  ✔ Implement callback engine that supports websocket async interaction and lack of immediate response @done(22-11-23 16:59)
    Notes: We cannot just create another `.onMessage` beacuse then the already existing one would be called.
  ✔ Get the database up and running with a model @done(22-11-18 13:54)
  ✔ Get the script running that will schedule all the blinks @done(22-11-18 13:54)
  ✔ Get the script running that will blink @done(22-11-18 13:55)
  ✔ Get the websockets to where we can connect based on Eye id @done(22-11-18 19:36)
  ✔ Get the ability to assign a blink to an Eye @done(22-11-18 23:13)
  ✔ Get websockets running to send the blink data to the web page @done(22-11-18 23:14)
  ✔ Get the web page to display the data @done(22-11-18 23:14)
  ✔ Get the web page to display the data in a way that is easy to read @done(22-11-18 23:14)
  ✔ Add the ability to group blinks under an Eye @done(22-11-18 23:14)
  ✔ Add the ability to update a blink for all users in a room @done(22-11-19 11:49)
  ✔ get_blink in consumer @done(22-11-19 11:49)
